// The result of randomWholeNum should be a whole number.
// Passed: You should use Math.random to generate a random number.
// Failed: You should have multiplied the result of Math.random by 10 to make it a number in the range from zero to nine.
// Passed: You should use Math.floor to remove the decimal part of the number.
function randomWholeNum() {
  return Math.floor(Math.random() * 10);
}
// Waiting: randomFraction should return a random number.
// Waiting: The number returned by randomFraction should be a decimal.
// Waiting: You should be using Math.random to generate the random decimal number.
function randomFraction() {
  // Only change code below this line
  return Math.random();
  // Only change code above this line
}

// The lowest random number that can be generated by randomRange should be equal to your minimum number, myMin.
// Passed: The highest random number that can be generated by randomRange should be equal to your maximum number, myMax.
// Passed: The random number generated by randomRange should be an integer, not a decimal.
// Passed: randomRange should use both myMax and myMin, and return a random number in your range.
function randomRange(myMin, myMax) {
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
}

// convertToInteger should use the parseInt() function
// Passed: convertToInteger("56") should return a number
// Passed: convertToInteger("56") should return 56
// Passed: convertToInteger("77") should return 77
// Passed: convertToInteger("JamesBond") should return NaN
function convertToInteger(str) {
  return parseInt(str);
}
convertToInteger("56");

// Passed: convertToInteger should use the parseInt() function
// Passed: convertToInteger("10011") should return a number The radix variable says that 11 is in the binary system, 
// or base 2. This example converts the string 11 to an integer 3.
// Passed: convertToInteger("10011") should return 19
// Passed: convertToInteger("111001") should return 57
// Passed: convertToInteger("JamesBond") should return NaN

function convertToInteger(str) {
  return parseInt(str, 2);
}

convertToInteger("10011");
convertToInteger("111001");
convertToInteger("JamesBond");

// checkEqual should use the conditional operator
// Passed: checkEqual(1, 2) should return the string Not Equal
// Passed: checkEqual(1, 1) should return the string Equal
// Passed: checkEqual(1, -1) should return the string Not Equal
function checkEqual(a, b) {
  return a == b ? "Equal" : "Not Equal";
}

console.log(checkEqual(1, 2)); // Output: Not Equal
console.log(checkEqual(1, -1)); // Output: Not Equal
console.log(checkEqual(1, 1)); // Output: Equal

// checkSign should use multiple conditional operators
// Passed: checkSign(10) should return the string positive. Note that capitalization matters
// Passed: checkSign(-12) should return the string negative. Note that capitalization matters
// Passed: checkSign(0) should return the string zero. Note that capitalization matters

function checkSign(num) {
  return (num > 0) ? "positive" : (num < 0) ? "negative" :  "zero";
}

checkSign(10);
checkSign(-12);
checkSign(0);

// countdown(-1) should return an empty array.
// Passed: countdown(10) should return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
// Passed: countdown(5) should return [5, 4, 3, 2, 1]
// Passed: Your code should not rely on any kind of loops (for, while or higher order functions such as forEach, map, filter, and reduce).
// Passed: You should use recursion to solve this problem.
// Passed: Global variables should not be used to cache the array.

// Only change code below this line
function countdown(n, countArray = []) {
  if (n < 1) {
    return countArray;
  } else {
    countArray.push(n);
    return countdown(n - 1, countArray);
  }
}
// Only change code above this line

console.log(countdown(-1));
console.log(countdown(10));
console.log(countdown(5));

// Your function should return an array.
// Passed: Your code should not use any loop syntax (for or while or higher order functions such as forEach, map, filter, or reduce).
// Passed: rangeOfNumbers should use recursion (call itself) to solve this challenge.
// Passed: rangeOfNumbers(1, 5) should return [1, 2, 3, 4, 5].
// Passed: rangeOfNumbers(6, 9) should return [6, 7, 8, 9].
// Passed: rangeOfNumbers(4, 4) should return [4].
// Passed: Global variables should not be used to cache the array.
function rangeOfNumbers(startNum, endNum) {
  if (startNum > endNum) {
    return [];
  } else {
    let countArray = rangeOfNumbers(startNum, endNum - 1);
    countArray.push(endNum);
    return countArray;
  }
}

console.log(rangeOfNumbers(1, 5)); // Output: [1, 2, 3, 4, 5]
